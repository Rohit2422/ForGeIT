// src/commands/create.ts
import fs from "fs";
import { fileURLToPath } from "url";
import path, { dirname, join } from "path";
import copyFolderSync from "../helpers/CopyFolder.js";
import { createExpressApp } from "../helpers/CreateExpressApp.js";
import { installDependencies } from "../helpers/InstallDependencies.js";
import generatePackageJson from "../helpers/GeneratePackageJson.js";
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
export default {
    name: "create",
    description: "Create a new project from a template",
    run: async (toolbox) => {
        const { parameters, prompt, print } = toolbox;
        let basename = path.basename(process.cwd());
        // Ask for project name
        let projectName = parameters.first ||
            (await prompt.ask({
                type: "input",
                name: "name",
                message: "Project name:",
            })).name;
        if (!projectName)
            throw new Error("Project name is required");
        const framework = "express"; // default framework
        // Ask for a package manager
        const packageManager = parameters.options.packageManager ||
            (await prompt.ask({
                type: "select",
                name: "packageManager",
                message: "Choose your package manager:",
                choices: ["bun", "pnpm", "npm"],
            })).packageManager;
        // Resolve template folder
        const templatePath = join(__dirname, "../templates", framework);
        if (!fs.existsSync(templatePath)) {
            print.error(`Template ${framework} does not exist!`);
            return;
        }
        // Destination folder
        const destinationPath = projectName === "." ? process.cwd() : join(process.cwd(), projectName);
        projectName === "." ? (projectName = basename) : "";
        if (!fs.existsSync(destinationPath)) {
            fs.mkdirSync(destinationPath, { recursive: true });
        }
        if (fs.readdirSync(destinationPath).length > 0) {
            print.warning(print.colors.warning("The current folder is not empty. Files might be overwritten!"));
            const { proceed } = await prompt.ask({
                type: "select",
                name: "proceed",
                message: print.colors.warning("Folder is not empty. Overwrite?"),
                choices: ["Yes", "No"],
            });
            if (proceed !== "Yes")
                return;
        }
        // Copy recursively
        copyFolderSync(templatePath, destinationPath);
        // modify the package json with the project name
        generatePackageJson(templatePath, destinationPath, projectName);
        // Generate dynamic express app
        createExpressApp(projectName, destinationPath, print);
        // install dependencies using chosen package manager
        installDependencies(destinationPath, packageManager, print);
        print.success(`Project ${print.colors.highlight(projectName)} created with ${framework}!`);
    },
};
